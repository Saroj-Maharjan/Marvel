package com.sawrose.marvelapp.core.data

import android.util.Log
import com.sawrose.marvelapp.core.datastore.ChangeListVersion
import com.sawrose.marvelapp.core.network.model.NetworkChangeList
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.combine
import kotlin.coroutines.cancellation.CancellationException

/**
 * Interface to manage synchronization of data between local and remote data sources for [Syncable].
 * */
interface Synchronizer{
    suspend fun getChangeListVersion(): ChangeListVersion
    suspend fun updateChangeListVersion(version: ChangeListVersion.() -> ChangeListVersion)

    suspend fun Syncable.sync()  = this@sync.syncWith(this@Synchronizer)
}

interface Syncable {
    suspend fun syncWith(synchronizer: Synchronizer): Boolean
}

/**
 * attempts [block], return successful [Result] if it succeds, otherwise return [Result.Failure]
 * taking care not to break structured concurrency.
 * */
private suspend fun <T> suspendRunCatching(block: suspend () -> T): Result<T> = try{
    Result.success(block())
}catch(cancellationException: CancellationException) {
    throw cancellationException
}
catch(exception: Exception){
    Log.i("SuspendRunCatching",
        "Failed to evaluate a suspendRunCatchingBlock. Returning failure Result",
        exception,
    )
    Result.failure(exception)
}

/**
 * Utility function for syncing a repository with the network.
 * [versionReader] Reads the current version of the model that needs to be synced
 * [changeListFetcher] Fetches the change list for the model
 * [versionUpdater] Updates the [ChangeListVersion] after a successful sync
 * [modelDeleter] Deletes models by consuming the ids of the models that have been deleted.
 * [modelUpdater] Updates models by consuming the ids of the models that have changed.
 *
 * Note that the blocks defined above are never run concurrently, and the [Synchronizer]
 * implementation must guarantee this.
 */
suspend fun Synchronizer.changeListSync(
    versionReader: (ChangeListVersion) -> Int,
    changeListFetcher: suspend (Int) -> List<NetworkChangeList>,
    versionUpdater: ChangeListVersion.(Int) -> ChangeListVersion,
    modelDeleter: suspend (List<String>) -> Unit,
    modelUpdater: suspend (List<String>) -> Unit,
) = suspendRunCatching {
    // Fetch the change list since last sync( alkin to git)
    val currentVersion = versionReader(getChangeListVersion())

    val changeList = changeListFetcher(currentVersion)
    if(changeList.isEmpty()) return@suspendRunCatching true

    val (deleted, updated) = changeList.partition(NetworkChangeList::isDelete)

    modelDeleter(deleted.map(NetworkChangeList::id))

    modelUpdater(updated.map(NetworkChangeList::id))

    val latestVersion = changeList.last().changeListVersion
    updateChangeListVersion {
        versionUpdater(latestVersion)
    }
}.isSuccess




/**
 * Returns a [Flow] whose values are generated by [transform] function that process the most
 * recently emitted values by each flow.
 */
fun <T1, T2, T3, T4, T5, T6, R> combine(
    flow: Flow<T1>,
    flow2: Flow<T2>,
    flow3: Flow<T3>,
    flow4: Flow<T4>,
    flow5: Flow<T5>,
    flow6: Flow<T6>,
    transform: suspend (T1, T2, T3, T4, T5, T6) -> R,
): Flow<R> = combine(
    combine(flow, flow2, flow3, ::Triple),
    combine(flow4, flow5, flow6, ::Triple),
) { t1, t2 ->
    transform(
        t1.first,
        t1.second,
        t1.third,
        t2.first,
        t2.second,
        t2.third,
    )
}